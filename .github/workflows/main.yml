# 工作流程名稱
name: Python CI/CD with Docker

# 觸發事件：當程式碼推送到 main 分支時，或手動觸發
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允許手動觸發

# 定義環境變數，用於 Docker 映像檔的名稱和標籤
env:
  # Docker 映像檔名稱，通常為您的 GitHub 用戶名/儲存庫名稱 (例如: your-username/your-repo-name)
  # 這將用於 GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # github.repository 會自動解析為 'username/repo-name'

# 定義工作
jobs:
  # CI 部分：建置和測試
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # 指定具體 Python 版本

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest

  # CD 部分：建置 Docker 映像檔並推送到 GitHub Container Registry
  build-and-push-docker:
    # 這個工作會在 'build-and-test' 工作成功後才執行
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 步驟 1: 登入 GitHub Container Registry
      # secrets.GITHUB_TOKEN 是一個 GitHub Actions 自動提供的特殊 token
      # 它允許工作流程與 GitHub API 互動，包括推送到 GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # github.actor 是觸發工作流程的用戶名
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步驟 2: 獲取 Docker 映像檔標籤 (tag)
      # 這裡我們使用提交的 SHA (短 hash) 作為標籤，這是一個唯一的標識
      # 也可以使用 'latest' 或版本號
      - name: Extract Docker metadata for tagging
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      # 步驟 3: 建置並推送到 Docker 映像檔
      # 'push: true' 表示建置完成後立即推送到註冊表
      # 'tags: ${{ steps.meta.outputs.tags }}' 使用上面定義的標籤
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的路徑，'.' 表示當前目錄
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker image pushed confirmation
        run: |
          echo "Docker image ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} has been pushed."
          echo "您可以到 GitHub 儲存庫的 'Packages' 頁面查看。"
